1. NO OCCURENCES

// You are using GCC
#include<iostream>
using namespace std;
int main()
{
    int n,flag=1;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    int a;
    cin>>a;
    int f=0;
    int l=n-1;
    while(f<=l)
    {
        int mid=(f+l)/2;
        if(arr[mid]<a)
        {
           f=mid+1;
        }
        else if(arr[mid]>a)
        {
            l=mid-1;
        }
        else
        {
            cout<<mid;
            flag=0;
            break;
        }
    }
    if(flag==1)
    {
        cout<<"NO OCCURRENCES";
    }
}


2.LINEAR SEARCH

// You are using GCC
#include<iostream>
using namespace std;
int main()
{
    int n,flag=1;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    int key;
    cin>>key;
    for(int i=0;i<n;i++)
    {
        if(arr[i]==key)
        {
            cout<<"Yes";
            flag=0;
            break;
        }
    }
        if(flag==1)
        {
            cout<<"No";
        }
    }


3.BUBBLE SORT

// You are using GCC
#include<iostream>
using namespace std;
int main()
{
    int n;
    cin>>n;
    int a[n];
    for(int i=0;i<n;i++)
    {
        cin>>a[i];
    }
    for(int i=0;i<n-1;i++)
    {
        for(int j=0;j<n-i-1;j++)
        {
            if(a[j]>a[j+1])
            {
                int temp = a[j];
                a[j]=a[j+1];
                a[j+1]=temp;
            }
        }
    }
    for(int i=0;i<n;i++)
    {
        cout<<a[i]<<" ";
    }
} 


4.INSERTION SORT

#include<iostream>
using namespace std;
int main()
{
    int n,j;
    cin>>n;
    int a[n];
    for(int i=0;i<n;i++)
    {
        cin>>a[i];
    }
    for(int i=1;i<n;i++)
    {
        int key = a[i];
        j=i-1;
        while(j>=0 && a[j]>key)
        {
            a[j+1]=a[j];
            j=j-1;
        }
        a[j+1]=key;
    }
    for(int i=0;i<n;i++)
    {
        cout<<a[i]<<" ";
    }
}

5.SELECTION SORT

// You are using GCC
#include<iostream>
using namespace std;
int main()
{
    int n;
    cin>>n;
    int day[n],month[n],year[n];
    for(int i=0;i<n;i++)
    {
        cin>>day[i]>>month[i]>>year[i];
    }
    for(int i=0;i<n;i++)
    {
        int min=i;
        for(int j=i+1;j<n;j++)
        {
            if(year[j]<year[min])
            {
                min=j;
            }
        }
        int temp = year[min];
        year[min]=year[i];
        year[i]=temp;
        int temp1=month[min];
        month[min]=month[i];
        month[i]=temp1;
        int temp2=day[min];
        day[min]=day[i];
        day[i]=temp2;
    }
    for(int i=0;i<n;i++)
    {
        cout<<day[i]<<" "<<month[i]<<" "<<year[i]<<"\n";
    }
}
6.HEAP SORT

#include<iostream>
using namespace std;
void maxHeapify(int arr[],int a,int i)
{
    int large=i;
    int l=2*i+1;
    int r=2*i+2;
    if(l<a &&arr[l]>arr[large])
        large=l;
    if(r<a &&arr[r]>arr[large])
        large=r;
    if(large!=i)
    {
        swap(arr[i],arr[large]);
        maxHeapify(arr,a,large);
    }
}
void maxheap(int arr[],int n)
{
    for(int i=n/2-1;i>=0;i--)
        maxHeapify(arr,n,i);
    for(int i=n-1;i>0;i--)
    {
        swap(arr[0],arr[i]);
        maxHeapify(arr,i,0);
    }
    
}


int main() 
{
    int a;
    cin>>a;
    int arr[a];
    for(int i=0;i<a;i++) cin>>arr[i];
    maxheap(arr,a);
    for(int i=0;i<a;i++) cout<<arr[i]<<" ";
 }


7.QUICK SORT

// You are using GCC
#include<iostream> 
using namespace std; 
int partition(int arr[],int low,int high) {
    int pivot=arr[low];
    int i=low; 
    int j=high; 
    while(i<j) { 
        while(arr[i]<=pivot) { i++; }
        while(arr[j]>pivot) { 
            j--;
            } 
        if(i<j) { 
            int temp=arr[i]; 
            arr[i]=arr[j]; 
            arr[j]=temp; 
            
        } 
        
    } 
    int temp=arr[low]; 
    arr[low]=arr[j]; 
    arr[j]=temp;
    return j; 
    
}
void quicksort(int arr[],int low,int high) {
    if(low<high) { 
        int pivotIndex=partition(arr,low,high); 
        quicksort(arr,low,pivotIndex-1);
        quicksort(arr,pivotIndex+1,high);
        }
        } 
        int main() 
        { int n; 
        cin>>n; 
        int arr[n];
        for(int i=0;i<n;i++) { 
            cin>>arr[i];
            }
            quicksort(arr,0,n-1); 
            for(int i=0;i<n;i++) 
            { cout<<arr[i]<<" ";
                
            }
            }

8.MERGE SORT

// You are using GCC
#include<iostream>
using namespace std;
void merge(int arr[],int start,int mid,int end)
{
    int i=start;
    int j=mid+1;
    int k=start;
    int b[end+1];
    while(i<=mid && j<=end)
    {
        if(arr[i]<arr[j])
        {
            b[k]=arr[i];
            i++;
            k++;
        }
        else
        {
            b[k]=arr[j];
            k++;
            j++;
        }
    }
    while(i<=mid)
    {
        b[k]=arr[i];
        i++;
        k++;
    }
    while(j<=end)
    {
        b[k]=arr[j];
        k++;
        j++;
    }
    for(i=start;i<=end;i++)
    {
        arr[i]=b[i];
    }
}
void msort(int arr[],int start,int end)
{
    if(start<end)
    {
        int mid=(start+end)/2;
        msort(arr,start,mid);
        msort(arr,mid+1,end);
        merge(arr,start,mid,end);
    }
}
int main()
{
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    msort(arr,0,n-1);
    for(int i=0;i<n;i++)
    {
        cout<<arr[i]<<" ";
    }
    
}

9.ACTIVITY SELECTION

// You are using GCC
#include<iostream>
using namespace std;
struct act{
    char name[20];
    int s,e;
}a[100];
int main()
{
    int n,m;
    cin>>n;
    for(int i=0;i<n;i++)
    cin>>a[i].name>>a[i].s>>a[i].e;
    for(int i=0;i<n;i++)
    {
        m=i;
        for(int j=i;j<n;j++)
        {
            if(a[m].e>a[j].e)
            {
                m=j;
            }
        }
        swap(a[i],a[m]);
    }
    cout<<"Selected Activities are:"<<"\n";
    cout<<a[0].name<<" ";
    int k=0;
    for(int i=0;i<n;i++)
    {
        if(a[i].s>=a[k].e)
        {
            cout<<a[i].name<<" ";
            k=i;
        }
    }
}

10.KNAPSACK

// You are using GCC
#include<iostream>
using namespace std;
struct act{
    char name[20];
    int s,e;
}a[100];
int main()
{
    int n,m;
    cin>>n;
    for(int i=0;i<n;i++)
    cin>>a[i].name>>a[i].s>>a[i].e;
    for(int i=0;i<n;i++)
    {
        m=i;
        for(int j=i;j<n;j++)
        {
            if(a[m].e>a[j].e)
            {
                m=j;
            }
        }
        swap(a[i],a[m]);
    }
    cout<<"Selected Activities are:"<<"\n";
    cout<<a[0].name<<" ";
    int k=0;
    for(int i=0;i<n;i++)
    {
        if(a[i].s>=a[k].e)
        {
            cout<<a[i].name<<" ";
            k=i;
        }
    }
}

11.NAIVE

// You are using GCC
#include<iostream>
using namespace std;
#include<cstring>
int search(char a[],char b[])
{
    int n=strlen(a);
    int m=strlen(b);
    for(int i=0;i<n;i++)
    {
        int j;
        for(j=0;j<m;j++)
        {
            if(a[i+j]!=b[j])
            {
                break;
            }
        }
        
    if(j==m)
    {
        return i;
    }
    }
    return -1;
}
int main()
{
    char a[100];
    char b[100];
    cin>>a>>b;
    int r=search(a,b);
    if(r!=-1)
    cout<<"Found at "<<r;
    else
    cout<<"Not Found";
}


12.KMP ALGORITHM

 #include<bits/stdc++.h>
using namespace std;

void computeLPSarray(string pat,int m,int lps[])
{
    int len=0;
    lps[0]=0;
    int i=1;
   
    while(i<m)
    {
        if(pat[i]==pat[len])
        {
            len++;
            lps[i]=len;
            i++;
        }
        else
        {
            if(len!=0)
            {
                len=lps[len-1];
            }
            else
            {
                lps[i]=0;
                i++;
            }
        }
    }
}
void KMP(string txt,string pat)
{
    int m,n,flag=0;
    n=txt.length();
    m=pat.length();
    int lps[m]={0};
    computeLPSarray(pat,m,lps);
    int i=0,j=0;
   
    while(i<n)
    {
        if(pat[j]==txt[i])
        {
            j++;
            i++;
        }
        if(j==m)
        {
            cout<<"Found at "<<i-j<<"\n";
            j=lps[j-1];
            flag=1;
        }
        else if(i<n && pat[j]!=txt[i])
        {
            if(j!=0)
            j=lps[j-1];
            else
            i=i+1;
        }
       
    }
   
    if(flag==0)
    cout<<"Not Found";
}
int main()
{
    string s,p;
    cin>>s>>p;
    KMP(s,p);
}


13.SUBSET SUM

#include<iostream>
using namespace std;
int countsub(int arr[],int n, int sum,int ci)
{
    if(sum==0)
    return 1;
    if(ci>=n||sum<0)
    return 0;
    int ic=countsub(arr,n,sum-arr[ci],ci+1);
    int ec=countsub(arr,n,sum,ci+1);
    return ic+ec;
}
int main()
{
    int n,targetsum;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++)
    cin>>arr[i];
    cin>>targetsum;
    int total=countsub(arr,n,targetsum,0);
    cout<<total;
}


14.RAT IN MAZE

// You are using GCC

 #include<iostream>
using namespace std;
bool issafe(int**arr,int x,int y,int n)
{
    if(x<n&&y<n&&arr[x][y]==1)
    {
        return true;
    }return false;
}
bool ratinmaze(int**arr,int x,int y,int n,int**sol)
{
    if(x==n-1&&y==n-1)
    {
        sol[x][y]=1;
        return true;
    }
    if (issafe(arr,x,y,n))
    {
        sol[x][y]=1;
        if(ratinmaze(arr,x+1,y,n,sol))
        {
            return true;
        }
        if(ratinmaze(arr,x,y+1,n,sol))
        {
            return true;
        }
    sol[x][y]=0;
    return false;
    }
    return false;
}
int main()
{
    int n;
    cin>>n;
    int**arr=new int*[n];
    for(int i=0;i<n;i++)
    {
        arr[i]=new int[n];
    }
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            cin>>arr[i][j];
        }
    }
    int **sol=new int*[n];
    for(int i=0;i<n;i++)
    {
        sol[i]=new int[n];
    }
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            sol[i][j]=0;
        }
    }
   if(ratinmaze(arr,0,0,n,sol)){
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            cout<<sol[i][j]<<" ";
        }cout<<"\n";
    }}
    else
    {
        cout<<"Solution doesn't exist";
    }
    
}

15. LCS

// You are using GCC
#include<bits/stdc++.h>
using namespace std;
int editDist(string w1,string w2)
{
    int n=w1.length();
    int m=w2.length();
    int** dp=new int*[n+1];
    for(int i=0;i<=n;i++)
    {
        dp[i]=new int[m+1];
        for(int j=0;j<=m;j++)
        {
            
            if(i==0 || j==0)
            dp[i][j]=0;
            
        }
    }
    w1=" "+w1;
    w2=" "+w2;
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=m;j++)
        {
            if(w1[i]!=w2[j])
            {
                dp[i][j]=max({dp[i-1][j],dp[i][j-1]});
            }
            else
            {
                dp[i][j]=dp[i-1][j-1]+1;
            }
        }
    }
    return dp[n][m];
}

int main()
{
    
    string a,b;
    cin>>a>>b;
    cout<<editDist(a,b)<<"\n";
    return 0;
}

16.LEVENHEISTEIN DISTANCE

// You are using GCC
#include<bits/stdc++.h>
using namespace std;
int editDist(string w1,string w2)
{
    int n=w1.length();
    int m=w2.length();
    int** dp=new int*[n+1];
    for(int i=0;i<=n;i++)
    {
        dp[i]=new int[m+1];
        for(int j=0;j<=m;j++)
        {
            dp[i][j]=0;
            if(i==0)
            dp[i][j]=j;
            else if(j==0)
            dp[i][j]=i;
        }
    }
    w1=" "+w1;
    w2=" "+w2;
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=m;j++)
        {
            if(w1[i]!=w2[j])
            {
                dp[i][j]=1+min({dp[i-1][j],dp[i][j-1],dp[i-1][j-1]});
            }
            else
            {
                dp[i][j]=dp[i-1][j-1];
            }
        }
    }
    return dp[n][m];
}

int main()
{
    
    string a,b;
    cin>>a>>b;
    cout<<editDist(a,b)<<"\n";
    return 0;
}

17. Segment Tree Range Minimum Query
#include <iostream>
#include <climits>
#include <cmath>
using namespace std;

void build(int arr[], int tree[], int start, int end, int treeNode)
{
    if (start == end) 
    {
        tree[treeNode] = arr[start];
        return;
    }

    int mid = (start + end) / 2;
    build(arr, tree, start, mid, 2 * treeNode + 1);
    build(arr, tree, mid + 1, end, 2 * treeNode + 2);

    tree[treeNode] = min(tree[2 * treeNode+1], tree[2 * treeNode + 2]);
}

int query(int tree[], int start, int end, int treeNode, int left, int right) 
{
    if (left > end or right < start)
        return INT_MAX;
    if (left <= start and right >= end)
        return tree[treeNode]; 

    int mid = (start + end) / 2;
    int leftt = query(tree, start, mid, 2 * treeNode + 1, left, right);
    int rightt = query(tree, mid + 1, end, 2 * treeNode + 2, left, right);

    return min(leftt,rightt);
}


int main()
{
    int n; 
    cin >> n;
    int arr[n]; 
    for (int i = 0; i < n; i++) cin >> arr[i];
    
    int left, right; 
    cin >> left >> right;
    int treeSize = 100;
    
    int tree[treeSize]; 

    build(arr, tree, 0, n - 1, 0);   
    cout << "Minimum of values in range [" << left << ", " << right << "] is = " ;
    cout <<  query(tree, 0, n - 1, 0, left, right)<< endl;

}

18. Range Minimum Query Using Sparse Table
#include <iostream>
#include <vector>
#include <cmath>
using namespace std;
const int MAXN = 100005;
const int K = 25;
int st[MAXN][K + 1];

void buildSparseTable(vector<int>& arr, int n) 
{
    for (int i = 0; i < n; i++) 
    {
        st[i][0] = arr[i];
    }

    for (int j = 1; j <= K; j++)
    {
        for (int i = 0; i + (1 << j) <= n; i++) 
        {
            st[i][j] = min(st[i][j - 1], st[i + (1 << (j - 1))][j - 1]);
        }
    }
}
int query(int l, int r) 
{
    int j = log2(r - l + 1);
    return min(st[l][j], st[r - (1 << j) + 1][j]);
}

int main()
{
    int n;
    cin >> n;
    vector<int> arr(n);
    for (int i = 0; i < n; i++) cin >> arr[i];

    buildSparseTable(arr, n);

    int l, r;
    cin >> l >> r;

    int result = query(l, r);
    cout << result << endl;

}

19.Floyd Warshall Algorithm
#include<iostream>
using namespace std;
int INF= 99999;
int V;
void Floyd(int **graph)
{
	int dist[V][V] , i , j , k;
	for(i = 0; i < V; i++) 
	{		
			for(j = 0; j < V; j++) 
			{
				dist[i][j] = graph[i][j];
			}
	}
	
	for (k = 0; k < V; k++) 
	{
		for (i = 0; i < V; i++) 
		{		
			for (j = 0; j < V; j++) 
			{
				if (dist[i][j] > dist[i][k] + dist[k][j])
					dist[i][j] = dist[i][k] + dist[k][j];
			}
		}
	}
    cout<<"Shortest path matrix"<<endl;
	for (i = 0; i < V; i++) 
	{
			for (j = 0; j < V; j++) 
			{
				if (dist[i][j] == INF)
					cout << "INF" << " ";
				else
					cout << dist[i][j] << " ";
			}
			cout << endl;
	}
}
int main()
{
	int E , source , destn , value;
	cin >> V >> E;
	int **graph = new int*[V]; 
	for (int i = 0 ; i < V ; i++)
	{
        graph[i] = new int[V];
    }
	for (int i = 0 ; i < V ; i++)
	{ 
		for (int j = 0 ; j < V ; j++)
		{ 
			if (i == j) 
				graph[i][j] = 0; 
			else 
				graph[i][j] = INF;	
		}
	}
	for (int i = 0 ; i < E ; i++)
	{
		cin >>source;
		cin >>destn;
		cin >>value;
		graph[source][destn] = value;
		graph[destn][source] = value;		
	}
	cout << "Original matrix" <<endl;
	for (int i = 0 ; i < V ; i++)
	{ 
		for (int j = 0 ; j < V ; j++)
		{ 
			if (graph[i][j] == INF) 
				cout << "INF  ";	 
			else
				cout << graph[i][j] << " ";		
		}
		cout << endl;
	}
	Floyd(graph);
}

20.Prim's Algorithm
#include<iostream>
using namespace std;
#define INFINITY 9999
int main()
{
	int x,y,u,v,n,i,j,num_edge=1;
	int visited[10]={0},min;
	cin>>n;
	int adj[n][n];
	for(i=0;i<n;i++)
	{
		for(j=0;j<n;j++)
		{
			cin>>adj[i][j];
			if(adj[i][j]==0)
				adj[i][j]=INFINITY;
		}
	}
	visited[0]=1;
	while(num_edge<n)
	{
		for(i=0,min=INFINITY;i<n;i++)
		{
			for(j=0;j<n;j++)
			{
				if(adj[i][j]<min)
				{
					if(visited[i]!=0)
					{
						min=adj[i][j];
						x=u=i;
						y=v=j;
					}
				}
			}
		}
		if(visited[u]==0 || visited[v]==0)
		{
			cout<<x<<"  "<<y<<"  "<<min<<endl;
			visited[y]=1;
		}
		adj[x][y]=adj[y][x]=9999;
		num_edge++;
	}
}

21. Dijkstra's algorithm
#include <iostream>
#include <climits>
using namespace std;
#define max 5 
int minDistance (int dist[] , bool sptSet[])
{
    int min = INT_MAX, min_index;

    for (int v = 0; v < max; v++) 
    {
        if (not sptSet[v] && dist[v] <= min)
        {
            min = dist[v];
            min_index = v;
        }
    }

    return min_index;
}

void printSolution (int dist[])
{
    cout << "Vertex\tDistance from Source\n";
    for (int i = 0; i < max; i++)
    {
        cout << i << "\t" << dist[i] << std::endl;
    }
}

void dijkstra (int graph[max][max] , int src) 
{
    int dist[max];
    bool sptSet[max];

    for (int i = 0; i < max; i++) 
    {
        dist[i] = INT_MAX;
        sptSet[i] = false;
    }

    dist[src] = 0;

    for (int count = 0; count < max - 1; count++) 
    {
        int u = minDistance(dist, sptSet);
        sptSet[u] = true;

        for (int v = 0; v < max; v++)
        {
            if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v])
            {
                dist[v] = dist[u] + graph[u][v];
            }
        }
    }

    printSolution(dist);
}

int main()
{
    int graph[max][max];
    for (int i = 0 ; i < max ; i++)
    {
        for (int j = 0 ; j < max ; j++)
        {
            cin >> graph[i][j];
        }
    }
    int s;
    cin >> s;
    dijkstra (graph , s);

}

22. Kruskal's Algorithm
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct Edge
{
    int src, dest, weight;
};

class Graph
{
public:
    int V, E;
    vector<Edge> edges;

    Graph(int V, int E) 
    {
        this->V = V;
        this->E = E;
    }

    void addEdge(int src, int dest, int weight) 
    {
        Edge edge;
        edge.src = src;
        edge.dest = dest;
        edge.weight = weight;
        edges.push_back(edge);
    }

    int findParent(int vertex, vector<int>& parent)
    {
        if (parent[vertex] == -1)
            return vertex;
        return findParent(parent[vertex], parent);
    }

    void unionSets(int x, int y, vector<int>& parent)
    {
        int xset = findParent(x, parent);
        int yset = findParent(y, parent);
        parent[xset] = yset;
    }

    void kruskalMST() 
    {
        vector<Edge> result;
        int i = 0;
        int e = 0;

        sort(edges.begin(), edges.end(), [](const Edge& a, const Edge& b)
        {
            return a.weight < b.weight;
        });

        vector<int> parent(V, -1);

        while (e < V - 1 && i < E)
        {
            Edge nextEdge = edges[i++];
            int x = findParent(nextEdge.src, parent);
            int y = findParent(nextEdge.dest, parent);

            if (x != y) 
            {
                result.push_back(nextEdge);
                unionSets(x, y, parent);
                e++;
            }
        }

        cout << "Following are the edges in the constructed MST" << endl;
        int minimumCost = 0;
        for (i = 0; i < e; i++)
        {
            cout << result[i].src << " -- " << result[i].dest << " == " << result[i].weight << endl;
            minimumCost += result[i].weight;
        }

        cout << "Minimum Cost Spanning Tree: " << minimumCost << endl;
    }
};

int main() 
{
    int V, E;
    cin >> V >> E;
    Graph graph(V, E);

    for (int i = 0; i < E; i++) 
    {
        int src, dest, weight;
        cin >> src >> dest >> weight;
        graph.addEdge(src, dest, weight);
    }

    graph.kruskalMST();
}
